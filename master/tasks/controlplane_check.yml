---
- name: Kubeadm | Master | Check if Kubernetes control plane is UP
  shell: |
    #!/bin/bash
    CONTAINERS=(kube-proxy etcd kube-controller-manager kube-apiserver kube-scheduler)
    for container in "${CONTAINERS[@]}"
    do
      STATE=$({{ bin_dir }}/crictl --runtime-endpoint {{ cri_socket }} ps -o json | {{ bin_dir }}/jq --arg container "$container" -r --unbuffered '.containers[]|select(.metadata.name == $container)|.state')
      if [ "$STATE" != "CONTAINER_RUNNING" ]; then
        exit 2
      fi
    done
  args:
    executable: /bin/bash
  ignore_errors: true
  register: kubernetes_control_plane_local
  changed_when: false

- name: Kubeadm | Master | Check if Kubernetes control plane is UP on other nodes
  shell: |
    #!/bin/bash
    CONTAINERS=(kube-proxy etcd kube-controller-manager kube-apiserver kube-scheduler)
    for container in "${CONTAINERS[@]}"
    do
      STATE=$({{ bin_dir }}/crictl --runtime-endpoint {{ cri_socket }} ps -o json | {{ bin_dir }}/jq --arg container "$container" -r --unbuffered '.containers[]|select(.metadata.name == $container)|.state')
      if [ "$STATE" != "CONTAINER_RUNNING" ]; then
        exit 2
      fi
    done
  args:
    executable: /bin/bash
  register: kubernetes_control_plane_delegated
  changed_when: false
  ignore_errors: true
  delegate_to: "{{ item }}"
  with_items: "{{ groups['master'] }}"
  when: item != inventory_hostname and kubernetes_control_plane_local.rc == 2
